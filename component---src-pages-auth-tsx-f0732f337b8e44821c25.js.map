{"version":3,"file":"component---src-pages-auth-tsx-f0732f337b8e44821c25.js","mappings":"+TAMO,SAASA,IACd,OAA0BC,EAAAA,EAAAA,UAAS,IAA5BC,EAAP,KAAcC,EAAd,KACA,GAAwBF,EAAAA,EAAAA,WAAS,sBAA1BG,EAAP,KAAaC,EAAb,KAGMC,EAA0B,oBAAXC,OA2CrB,OAxCAC,EAAAA,EAAAA,YAAU,WACR,IAIMC,GAJMH,EAAQ,IAAMI,SAASD,MAIlBE,UAAU,GACrBC,EAAS,IAAIC,gBAAgBJ,GAC7BK,EAAOF,EAAOG,IAAI,QAClBC,EAAQJ,EAAOG,IAAI,gBACnBE,EAAQL,EAAOG,IAAI,SACnBG,EAAYN,EAAOG,IAAI,cACvBI,EAAmBP,EAAOG,IAAI,qBAChCK,EAAW,GACXC,GAAU,qBAEZD,EADW,WAATN,EACS,UAEA,iBAGXM,GADEH,EACU,UACHD,EACG,cAEA,UAOZK,EALGJ,GAKO,qBACR,2BAAaC,EAAS,KAAQA,EAAR,IAAuB,GADrC,KAC2CD,GACnD,oBACCE,EAAmBA,EAAmB,IAAM,KAPrC,kDAUZhB,EAASiB,GACTf,EAAQgB,KACP,KAED,SAAC,IAAD,CACEnB,MAAM,OACNoB,YAAY,mBACZC,YAAY,EACZC,YAAY,IAEZ,SAAC,IAAD,CACEC,IAAG,EAKHvB,MAAOA,KAGT,SAAC,IAAD,CACEuB,IAAG,IAKDnB,GAASF,IAMnB","sources":["webpack://toit.io/./src/pages/auth.tsx"],"sourcesContent":["import { css } from \"@emotion/react\";\nimport React, { useEffect, useState } from \"react\";\nimport Layout from \"../components/layout\";\nimport PageTitle from \"../components/layout/PageTitle\";\nimport Section from \"../components/layout/Section\";\n\nexport function AuthPage(): JSX.Element {\n  const [title, setTitle] = useState(\"\");\n  const [body, setBody] = useState(<div></div>)\n\n  // We don't have access to the location during server-side rendering.\n  const isSSR = typeof window === \"undefined\";\n\n  // Only executed on the client.\n  useEffect(() => {\n    const loc = isSSR ? \"#\" : location.hash;\n    // Parse the hash.\n    // Of the form #access_token=...&token_type=Bearer&expires_in=3600.\n    // Or, for erros: #error=unauthorized_client&error_code=401&error_description=Email+link+is+invalid+or+has+expired\n    const hash = loc.substring(1);\n    const params = new URLSearchParams(hash);\n    const type = params.get(\"type\");\n    const token = params.get(\"access_token\");\n    const error = params.get(\"error\");\n    const errorCode = params.get(\"error_code\");\n    const errorDescription = params.get(\"error_description\");\n    let newTitle = \"\";\n    let newBody = <div></div>;\n    if (type === \"signup\") {\n      newTitle = \"Sign up\";\n    } else {\n      newTitle = \"Authentication\"\n    }\n    if (error) {\n      newTitle += \" failed\"\n    } else if (token) {\n      newTitle += \" successful\"\n    } else {\n      newTitle += \" failed\"\n    }\n    if (!error) {\n      newBody = <div>\n        You may close this window.\n      </div>\n    } else {\n      newBody = <div>\n        <b>Error</b>{errorCode ? ` (${errorCode})` : \"\"}: {error}\n        <br/>\n        {errorDescription ? errorDescription + \".\" : \"\"}\n      </div>\n    }\n    setTitle(newTitle);\n    setBody(newBody);\n  }, []); // Empty dependency array to ensure it runs only once on mount.\n  return (\n    <Layout\n      title=\"Auth\"\n      description=\"Auth status page\"\n      simplified={true}\n      hideHeader={true}\n    >\n      <PageTitle\n        css={css`\n          h1 {\n            max-width: 15em;\n          }\n        `}\n        title={title}\n      />\n\n      <Section\n        css={css`\n          text-align: center;\n          padding-top: 4.5rem;\n        `}\n      >\n        {!isSSR && body}\n      </Section>\n    </Layout>\n  );\n}\n\nexport default AuthPage;\n"],"names":["AuthPage","useState","title","setTitle","body","setBody","isSSR","window","useEffect","hash","location","substring","params","URLSearchParams","type","get","token","error","errorCode","errorDescription","newTitle","newBody","description","simplified","hideHeader","css"],"sourceRoot":""}