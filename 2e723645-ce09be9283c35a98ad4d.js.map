{"version":3,"file":"2e723645-ce09be9283c35a98ad4d.js","mappings":"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","sources":["webpack://toit.io/./src/components/header.tsx"],"sourcesContent":["import { css, Global } from \"@emotion/react\";\nimport styled from \"@emotion/styled\";\nimport { globalHistory } from \"@reach/router\";\nimport clsx from \"clsx\";\nimport * as React from \"react\";\nimport { useEffect, useRef, useState } from \"react\";\nimport CaretSvg from \"../assets/images/icons/caret.inline.svg\";\nimport ToitLogo from \"../assets/images/toit-logo.inline.svg\";\nimport menu from \"../content/menu.yaml\";\nimport { white } from \"../theme\";\nimport { ButtonLink } from \"./button\";\nimport { breakpoints } from \"./global-css\";\nimport Link from \"./link\";\nimport SubmenuContainer from \"./Menu/SubmenuContainer\";\n\nimport { Menu as PopupMenu } from \"./popup-menu/menu\";\nimport MenuToggle from \"./popup-menu/menu-toggle\";\nimport SignUpButton from \"./sign-up-button\";\n\nconst Wrapper = styled.div`\n  --menuFadeSpeed: 150ms;\n`;\n\nconst Container = styled.header`\n  position: fixed;\n  top: 0;\n  left: 0;\n  width: 100%;\n  z-index: 500;\n  backdrop-filter: blur(10px);\n  transition: background-color var(--menuFadeSpeed) linear;\n  color: var(--headerTextColor);\n  &:hover {\n    background: var(--headerHoverBackgroundColor);\n  }\n`;\nconst openedContainerCss = css`\n  background: ${white.string()};\n`;\n\nconst desktopCss = css`\n  ${breakpoints.mediumDown} {\n    display: none;\n  }\n`;\nconst mobileCss = css`\n  ${breakpoints.medium} {\n    display: none !important;\n  }\n`;\n\nconst scrolledDown = css`\n  background: var(--headerBackgroundColor);\n`;\n\nconst Mask = styled.div`\n  background: rgba(0, 0, 0, 0.3);\n  position: fixed;\n  left: 0;\n  width: 100%;\n  height: 100%;\n  z-index: 499;\n  opacity: 0;\n  transition: opacity var(--menuFadeSpeed) linear;\n  pointer-events: none;\n`;\n\nconst Content = styled.div`\n  margin: 0 auto;\n  box-sizing: content-box;\n  max-width: var(--maxPageWidth);\n  padding: 0 var(--contentPadding);\n\n  display: flex;\n  height: 4.5rem;\n  align-items: center;\n  justify-content: space-between;\n`;\n\nconst AccountButtons = styled.div``;\n\nconst Menu = styled.nav`\n  svg {\n    position: relative;\n    top: -2px;\n    transition: all 100ms linear;\n    &.opened {\n      transform: rotate(180deg);\n    }\n  }\n`;\n\nconst menuLinkCss = css`\n  display: inline-block;\n  cursor: pointer;\n  text-decoration: none;\n  &:not(:last-child) {\n    margin-right: 1.5rem;\n  }\n`;\n\ninterface HeaderProps {\n  callToAction?: JSX.Element;\n}\n\nexport function Header({\n  callToAction\n}: HeaderProps): JSX.Element {\n  const [submenuVisible, setSubmenuVisible] = useState(false);\n\n  const [popupVisible, setPopupVisible] = useState(false);\n\n  const [visibleSubmenu, setVisibleSubmenu] = useState<string | undefined>();\n\n  // Whether the user scrolled down a bit. This is used to either set a\n  // background to the menu or not.\n  const [isScrolledDown, setIsScrolledDown] = useState(false);\n\n  useEffect(() => {\n    const setScrolled = () => setIsScrolledDown(window.scrollY > 40);\n\n    window.addEventListener(\"scroll\", setScrolled);\n\n    return () => window.removeEventListener(\"scroll\", setScrolled);\n  }, []);\n\n  function openSubmenu(item: string) {\n    return () => {\n      setSubmenuVisible(true);\n      setVisibleSubmenu(item);\n    };\n  }\n  function toggleSubmenu(item: string) {\n    return () => {\n      if (visibleSubmenu == item) {\n        closeSubmenu();\n      } else {\n        openSubmenu(item)();\n      }\n    };\n  }\n  function closeSubmenu() {\n    setVisibleSubmenu(undefined);\n    setSubmenuVisible(false);\n  }\n\n  const containerRef = useRef<HTMLElement>(null);\n\n  useEffect(() => {\n    return globalHistory.listen(({ action }) => {\n      if (action === \"PUSH\") {\n        closeSubmenu();\n        setPopupVisible(false);\n      }\n    });\n  }, [closeSubmenu, setPopupVisible]);\n\n  return (\n    <Wrapper onMouseLeave={closeSubmenu}>\n      {popupVisible && (\n        <Global\n          styles={css`\n            html {\n              overflow: hidden;\n            }\n          `}\n        />\n      )}\n      <Container ref={containerRef} css={[isScrolledDown && scrolledDown, popupVisible && openedContainerCss]}>\n        <Content>\n          <Link to=\"/\">\n            <ToitLogo\n              css={css`\n                height: 1.5rem;\n                width: auto;\n                margin-right: 8rem;\n              `}\n            />\n          </Link>\n          <Menu css={desktopCss}>\n            {menu.items.map((menuItem) => {\n              if (menuItem.subpages) {\n                return (\n                  <div\n                    role=\"button\"\n                    tabIndex={0}\n                    aria-expanded={visibleSubmenu == menuItem.title ? \"true\" : \"false\"}\n                    key={menuItem.title}\n                    css={menuLinkCss}\n                    onMouseEnter={openSubmenu(menuItem.title)}\n                    onClick={toggleSubmenu(menuItem.title)}\n                  >\n                    {menuItem.title} <CaretSvg className={clsx(visibleSubmenu == menuItem.title && \"opened\")} />\n                  </div>\n                );\n              } else {\n                return (\n                  <Link\n                    key={menuItem.title}\n                    tabIndex={0}\n                    css={menuLinkCss}\n                    to={menuItem.path}\n                    href={menuItem.href}\n                    onMouseEnter={closeSubmenu}\n                    onClick={closeSubmenu}\n                  >\n                    {menuItem.title}\n                  </Link>\n                );\n              }\n            })}\n          </Menu>\n          <AccountButtons css={desktopCss}>\n            <ButtonLink\n              href=\"https://chat.toit.io/\"\n              size=\"small\"\n              variant=\"text\"\n              css={css`\n                margin-right: 1.5rem;\n              `}\n            >\n              Discussions\n            </ButtonLink>\n            { callToAction ?? <SignUpButton size=\"small\" /> }\n          </AccountButtons>\n          <MenuToggle css={mobileCss} toggle={() => setPopupVisible(!popupVisible)} isOpen={popupVisible} />\n        </Content>\n        <SubmenuContainer isVisible={submenuVisible} visibleSubmenu={visibleSubmenu} />\n      </Container>\n      <Mask\n        css={\n          submenuVisible &&\n          css`\n            opacity: 1;\n          `\n        }\n      />\n      <PopupMenu css={mobileCss} isOpen={popupVisible} />\n    </Wrapper>\n  );\n}\n\nexport function SimplifiedHeader({ callToAction }: { callToAction?: JSX.Element }): JSX.Element {\n  // Whether the user scrolled down a bit. This is used to either set a\n  // background to the menu or not.\n  const [isScrolledDown, setIsScrolledDown] = useState(false);\n\n  useEffect(() => {\n    const setScrolled = () => setIsScrolledDown(window.scrollY > 40);\n\n    window.addEventListener(\"scroll\", setScrolled);\n\n    return () => window.removeEventListener(\"scroll\", setScrolled);\n  }, []);\n\n  return (\n    <Wrapper>\n      <Container css={[isScrolledDown && scrolledDown]}>\n        <Content>\n          <Link to=\"/\">\n            <ToitLogo\n              css={css`\n                height: 1.5rem;\n                width: auto;\n                margin-right: 2rem;\n              `}\n            />\n          </Link>\n          <AccountButtons>{callToAction ?? <SignUpButton size=\"small\" />}</AccountButtons>\n        </Content>\n      </Container>\n    </Wrapper>\n  );\n}\n\nexport default Header;\n"],"names":["Wrapper","Container","openedContainerCss","css","white","desktopCss","breakpoints","mobileCss","scrolledDown","Mask","Content","AccountButtons","Menu","menuLinkCss","SimplifiedHeader","callToAction","useState","isScrolledDown","setIsScrolledDown","useEffect","setScrolled","window","scrollY","addEventListener","removeEventListener","to","size","submenuVisible","setSubmenuVisible","popupVisible","setPopupVisible","visibleSubmenu","setVisibleSubmenu","openSubmenu","item","closeSubmenu","undefined","containerRef","useRef","globalHistory","action","onMouseLeave","Global","styles","ref","menu","menuItem","subpages","role","tabIndex","title","key","onMouseEnter","onClick","className","clsx","path","href","variant","toggle","isOpen","isVisible"],"sourceRoot":""}